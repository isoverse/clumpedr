% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{pipe_plot}
\alias{pipe_plot}
\title{Plot as a side-effect of a pipe}
\usage{
pipe_plot(dat, plotfun, ...)
}
\arguments{
\item{dat}{Tibble in the pipe.}

\item{plotfun}{Function to use for plotting.}

\item{...}{Additional arguments to the plotting function.}
}
\description{
This function takes a tibble, applies a plotting function with additional
arguments, makes sure to print it, and then returns the original dataframe
unaffected.
}
\details{
This is equivalent to running the \code{magrittr::\%T>\%} operator with
curly braces and a print command, but this is much cleaner.
}
\examples{
# create an example tibble
dat <- tibble(x = 1:10, y = 11:20)
# an example of a plotting function that would normally not print in a pipe.
pointplot <- function(dat, ...) {
  ggplot(dat, aes(x = x, y = y)) +
  geom_point(...)
}
# calling the function within the pipe now prints it and returns the input!
dat \%>\%
  pipe_plot(pointplot) \%>\%
  glimpse()
}
